name: New Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release"
        required: true
        default: "minor"
        type: choice
        options:
          - minor
          - month
          - major
      preview:
        description: "Create a preview"
        required: true
        type: boolean

env:
  CRYSTAL_VERSION: latest
  EPHEMERAL_STAGING_BRANCH: placeos-ephemeral-staging

jobs:
  new-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install crystal
        uses: crystal-lang/install-crystal@v1.7.0
        with:
          crystal: ${{ env.CRYSTAL_VERSION }}

      - name: Update VERSION
        id: update-version
        shell: bash
        run: |
          set -x

          git fetch --all

          git checkout -b ${{ env.EPHEMERAL_STAGING_BRANCH }}

          old_version="$(cat VERSION)"

          crystal run .scripts/update.cr -- \
            ${{ github.event.inputs.preview == 'true' && '--preview' || '' }} \
            --${{ github.event.inputs.release_type }}

          new_version="$(cat VERSION)"

          # Remove release candidate suffix AND `placeos-` prefix
          stripped_new="$(sed -rE 's/^(placeos-)?([0-9\.]*)(-rc[0-9]+)?$/\2/'<<<"${new_version}")"

          echo "old-version=${old_version}" >> $GITHUB_OUTPUT
          echo "new-version=${new_version}" >> $GITHUB_OUTPUT
          echo "stripped-new-version=${stripped_new}" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        shell: bash
        run: |
          crystal run .scripts/update_changelog.cr -- --next-version "${STRIPPED_NEW_VERSION}"
        env:
          STRIPPED_NEW_VERSION: ${{ steps.update-version.outputs.stripped-new-version }}

      - name: Update OPEN API Doc Links
        shell: bash
        run: |

          git fetch --all

          submodules=("services/rest-api" "services/staff-api" "swagger/rest-api" "swagger/staff-api")

          for submodule in "${submodules[@]}"; do
            commit_id=$(git submodule status "$submodule" | awk '{print $1}')
            module_name=$(basename "$submodule")
            new_url="https://raw.githubusercontent.com/PlaceOS/${module_name}/${commit_id}/OPENAPI_DOC.yml"

            input_file="swagger/$module_name/versions.json"
            temp_file=$(mktemp)


            jq --arg version "$VERSION" --arg new_url "$new_url" \
              'to_entries | (.[0:1] + [{"key": $version, "value": $new_url}] + .[1:]) | from_entries' \
              "$input_file" > "$temp_file"

            mv "$temp_file" "$input_file"
          done

      - name: Configure git user
        run: |
          git config user.email "robots@place.technology"
          git config user.name "PlaceOS Robot"

      - name: Commit
        run: |
          git commit --all --message="build: update for $VERSION"
        env:
          VERSION: ${{ steps.update-version.outputs.new-version }}

      - name: Push
        id: push
        shell: bash
        run: |
          set -x

          branch="${STRIPPED_NEW_VERSION}${{ github.event.inputs.preview == 'true' && '-preview' || '-staging' }}"

          git fetch --all

          # Checkout the existing branch, or make a new one
          git checkout --merge "$branch" || git checkout -b "$branch"

          git branch --set-upstream-to="origin/${branch}" "${branch}" || echo "branch not in remote"
          git pull --no-rebase || echo "failed to pull"

          # Merge changes from the working branch
          git merge --strategy-option=theirs ${{ env.EPHEMERAL_STAGING_BRANCH }}

          git push -u origin "$branch"

          echo "branch=${branch}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ steps.update-version.outputs.new-version }}
          STRIPPED_NEW_VERSION: ${{ steps.update-version.outputs.stripped-new-version }}

      - name: Create a PR
        shell: bash
        if: github.event.inputs.preview == 'false'
        run: |
          set -x

          # Login with GitHub CLI
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token

          base='release'

          # Create PR
          gh pr create \
              --head "$BRANCH" \
              --title "build: \`${VERSION}\`" \
              --assignee placeos-robot \
              --label 'release,type: maintenance' \
              --base "$base" \
              --body "A new PlaceOS ${base}, ready to go."
        env:
          BRANCH: ${{ steps.push.outputs.branch }}
          VERSION: ${{  steps.update-version.outputs.new-version  }}
