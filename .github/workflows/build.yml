name: Build

on:
  workflow_run:
    workflows: [Update]
    branches: [nightly]
    types: [completed]

  push:
    branches:
      # Monthly releases
      - '[0-9]+.[0-9][0-9][0-9][0-9]'
      # Release candidates
      - '[0-9]+.[0-9][0-9][0-9][0-9].[0-9]+-preview'

  workflow_dispatch:

env:
  CRYSTAL_VERSION: 1.4.0
  RELEASE_REPO: PlaceOS/PlaceOS
  PARTNER_ENVIRONMENT_REPO: place-labs/partner-environment

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.introspect.outputs.services }}
      version:  ${{ steps.introspect.outputs.version }}
      commit:   ${{ github.sha }}
    name: Discover
    steps:
    -
      name: Checkout local actions and scripts
      uses: actions/checkout@v3
    -
      name: Discover services
      id:   introspect
      uses: ./.github/actions/platform-info
      with:
        ref: ${{ github.ref }}

  build:
    needs: discover
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover.outputs.services) }}
      fail-fast: false
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.tags.outputs.tags }}
    name: Build ${{ matrix.service.name }}
    steps:
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Construct Tags
      id: tags
      run: |
        branch=${GITHUB_REF#refs/*/}
        version=${{ needs.discover.outputs.version }}

        # This will default to the branch name if `VERSION` has not changed
        tags=placeos/${{ matrix.service.name }}:${version}

        # Update monthly tag if a version is created.
        # i.e. Tag `1.2203` in addition to `1.2203.1`
        if [[ $branch =~ ^[0-9]+\.[0-9]{4}$ ]]
        then
          echo "Adding \`placeos-${branch}\` tag"
          tags="${tags},placeos/${{ matrix.service.name }}:placeos-${branch}"
        fi

        # Add `latest` tag if creating newest version
        latest_release_tag=$(git tag | grep -E '^[0-9]+\.[0-9]{4}\.[0-9]+$' | tail -1)
        if [[ $version =~ ^[0-9]+\.[0-9]{4}\.[0-9]+$ && $version > $latest_release_tag ]]
        then
          echo 'Adding `latest` tag'
          tags="${tags},placeos/${{ matrix.service.name }}:latest"
        fi


        # Add `preview` tag if creating newest preview version
        latest_preview_tag=$(git tag | grep -E '^[0-9]+\.[0-9]{4}\.[0-9]+-rc[0-9]+$' | tail -1)

        if [[ $version =~ ^[0-9]+\.[0-9]{4}\.[0-9]+-rc[0-9]+$ && $version > "$latest_preview_tag" ]]
        then
          echo 'Adding `preview` tag'
          tags="${tags},placeos/${{ matrix.service.name }}:preview"
        fi


        echo ::set-output name=tags::$tags
    -
      name: Build image
      id:   build
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.service.repo }}#${{ matrix.service.sha }}
        build-args: |
          CRYSTAL_VERSION=${{ env.CRYSTAL_VERSION }}
          PLACE_COMMIT=${{ needs.discover.outputs.commit }}
          PLACE_VERSION=${{ needs.discover.outputs.version }}
          TARGET=${{ matrix.service.name }}
        outputs: type=docker,dest=image.tar
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,scope=${{ matrix.service.name }},mode=max
        tags: ${{ steps.tags.outputs.tags }}
        labels: |
          org.opencontainers.image.url=${{ matrix.service.href }}
          org.opencontainers.image.source=${{ matrix.service.href }}/tree/${{ matrix.service.sha }}
          org.opencontainers.image.version=${{ needs.discover.outputs.version }}
          org.opencontainers.image.revision=${{ matrix.service.sha }}
          org.opencontainers.image.vendor=Place Technology Limited
          org.opencontainers.image.title=${{ matrix.service.name }}
    -
      name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.service.name }}
        path: image.tar

  publish:
    name: Publish ${{ needs.discover.outputs.version }}
    needs:
      - build
      - discover
    runs-on: ubuntu-latest
    environment: release
    steps:
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Download service artifacts
      uses: actions/download-artifact@v2
    -
      name: Load images
      run:  |
        for service in *; do
          echo ::group::$service
          docker load --input $service/image.tar |
          awk '{print $NF}' | xargs docker inspect
          echo ::endgroup::
        done
    -
      name: Publish
      run:  |
        for service in *; do
          echo ::group::$service
          docker push placeos/$service --all-tags
          echo ::endgroup::
        done
    -
      name: Google Chat Notification
      if: success()
      uses: Co-qn/google-chat-notification@releases/v1
      with:
          name: Build PlaceOS ${{ needs.discover.outputs.version }}
          url: ${{ secrets.CHAT_SUCCESS }}
          status: ${{ job.status }}
    -
      name: Google Chat Notification
      if: ${{ failure() || cancelled() }}
      uses: Co-qn/google-chat-notification@releases/v1
      with:
          name: Build PlaceOS ${{ needs.discover.outputs.version }}
          url: ${{ secrets.CHAT_ERROR }}
          status: ${{ job.status }}

  release:
    needs:
      - build
      - discover
      - publish
    runs-on: ubuntu-latest
    name: Tag and release
    steps:
      -
        name: Checkout Repository
        uses: actions/checkout@v3
      -
        name: Tag
        shell: bash
        run: |
          # Iterate through tags from the build jobs, force updating tags (spooky)
          IFS=','
          read -ratags<<< "${{ needs.build.outputs.tags }}"
          for tag in "${tags[@]}"; do
            # Remove prefix
            tag="$(sed -rE 's/^.*:?(placeos-)+(.*)$/\2/'<<<$tag)"
            echo "Tagging ${tag}"
            git tag --force "$tag"
          done
          git push --tags --force

      -
        id: prepare-release
        run: |
          # Check if $version is formatted like a release
          should_release='false'
          version=${{ needs.discover.outputs.version }}
          if [[ $version =~ ^[0-9]+\.[0-9]{4}\.[0-9]+$ ]]
          then
            should_release='true'
          fi

          echo ::set-output name=should-release::${should_release}

          # Generate anchor to point to CHANGELOG heading in release notes
          anchor=$(echo $version | tr -d '.')
          echo ::set-output name=anchor::$anchor

      # Create a release
      # - The body has link to the ref on github _with_ markdown anchor to correct version.
      #
      # TODO: See if there's a way to embed a range of text from the CHANGELOG, like a code snippet.
      -
        name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ steps.prepare-release.outputs.should-release == 'true' }}
        with:
          token: ${{ github.token }}
          generate_release_notes: false
          repository: ${{ env.RELEASE_REPO }}
          tag_name: ${{ needs.discover.outputs.version }}
          body: |
            See the [`CHANGELOG`](https://github.com/${{ env.RELEASE_REPO }}/blob/${{ needs.discover.outputs.version }}/CHANGELOG.md#${{ steps.prepare-release.outputs.anchor }}) for release notes.

      -
        name: Update partner-environment
        if: ${{ steps.prepare-release.outputs.should-release == 'true' }}
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: update
          repository: ${{ env.PARTNER_ENVIRONMENT_REPO }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
