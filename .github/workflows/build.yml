name: Build

on:
  workflow_run:
    workflows: [Update]
    branches: [nightly]
    types: [completed]

  push:
    branches:
      - '[0-9].[0-9][0-9][0-9][0-9]'

env:
  CRYSTAL_VERSION: 1.1.1

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.introspect.outputs.services }}
      commit: ${{ steps.introspect.outputs.commit }}
      version: ${{ steps.version.outputs.tag }}
    name: Discover
    steps:
    -
      name: Checkout release
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    -
      name: Generate version number
      id: version
      run: |
        branch=$(git branch --show-current)
        if [[ $branch =~ ^[0-9]+\.[0-9]{4}$ ]]
        then
          echo ::debug::Generating platform version
          offset=$(git rev-list origin/nightly.. --count)
          echo ::set-output name=tag::placeos-$branch.$offset
        else
          echo ::debug::Not on a release branch, using branch name
          echo ::set-output name=tag::$branch
        fi
    -
      name: Discover services
      id:   introspect
      run: |
        echo ::set-output name=commit::$(git rev-parse HEAD)
        echo ::set-output name=services::$(
          git submodule--helper list services |
          while read -r _ sha _ path; do
            sm_name=$(git submodule--helper name $path)
            name=$(basename $path)
            repo=$(git submodule--helper config submodule.$sm_name.url)
            echo "$name $path $repo $sha"
          done |
          jq -Rnc '. |= [ inputs | split(" ") |
            {
              name: .[0],
              path: .[1],
              repo: .[2],
              href: .[2][:-4],
              sha:  .[3],
            }
          ]'
        )

  build:
    needs: discover
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover.outputs.services) }}
      fail-fast: false
    runs-on: ubuntu-latest
    name: Build ${{ matrix.service.name }}
    steps:
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Build image
      id:   build
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.service.repo }}#${{ matrix.service.sha }}
        build-args: |
          CRYSTAL_VERSION=${{ env.CRYSTAL_VERSION }}
          PLACE_COMMIT=${{ needs.discover.outputs.commit }}
          PLACE_VERSION=${{ needs.discover.outputs.version }}
          TARGET=${{ matrix.service.name }}
        outputs: type=docker,dest=image.tar
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,scope=${{ matrix.service.name }},mode=max
        tags: placeos/${{ matrix.service.name }}:${{ needs.discover.outputs.version }}
        labels: |
          org.opencontainers.image.url=${{ matrix.service.href }}
          org.opencontainers.image.source=${{ matrix.service.href }}/tree/${{ matrix.service.sha }}
          org.opencontainers.image.version=${{ needs.discover.outputs.version }}
          org.opencontainers.image.revision=${{ matrix.service.sha }}
          org.opencontainers.image.vendor=Place Technology Limited
          org.opencontainers.image.title=${{ matrix.service.name }}
    -
      name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.service.name }}
        path: image.tar

  publish:
    needs:
    - build
    runs-on: ubuntu-latest
    name: Publish
    steps:
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Download service artifacts
      uses: actions/download-artifact@v2
    -
      name: Load images
      run:  |
        for service in *; do
          echo ::group::$service
          docker load --input $service/image.tar |
          awk '{print $NF}' | xargs docker inspect
          echo ::endgroup::
        done
    -
      name: Publish
      run:  |
        for service in *; do
          echo ::group::$service
          docker push placeos/$service --all-tags
          echo ::endgroup::
        done
