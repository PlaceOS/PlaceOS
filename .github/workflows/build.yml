name: Build

on:
  workflow_run:
    workflows: [Update]
    branches: [nightly]
    types: [completed]

  push:
    branches:
      # Monthly releases
      - '[0-9]+.[0-9][0-9][0-9][0-9]'
      # Release candidates
      - '[0-9]+.[0-9][0-9][0-9][0-9].[0-9]+-rc[0-9]+'

  workflow_dispatch:

env:
  CRYSTAL_VERSION: 1.3.2

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.introspect.outputs.services }}
      version:  ${{ steps.introspect.outputs.version }}
      commit:   ${{ github.sha }}
    name: Discover
    steps:
    -
      name: Checkout local actions and scripts
      uses: actions/checkout@v2
    -
      name: Discover services
      id:   introspect
      uses: ./.github/actions/platform-info
      with:
        ref: ${{ github.ref }}

  build:
    needs: discover
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover.outputs.services) }}
      fail-fast: false
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.tags.outputs.tags }}
    name: Build ${{ matrix.service.name }}
    steps:
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Construct Tags
      id: tags
      run: |
        branch=${GITHUB_REF#refs/*/}
        version=${{ needs.discover.outputs.version }}

        # This will default to the branch name if `VERSION` has not changed
        tags=placeos/${{ matrix.service.name }}:${version}

        # Update monthly tag if a version is created.
        # i.e. Tag `1.2203` in addition to `1.2203.1`
        if [[ $branch =~ ^[0-9]+\.[0-9]{4}$ ]]
        then
          tags="${tags},${branch}"
        fi

        # Add `latest` tag if creating newest version
        latest_release_tag=$(git tag | grep -E '^[0-9]+\.[0-9]{4}\.[0-9]+$' | tail -1)
        if [[ $version =~ ^[0-9]+\.[0-9]{4}\.[0-9]+$ && $version > $latest_release_tag ]]
        then
          tags="$tags,latest"
        fi


        # Add `preview` tag if creating newest preview version
        latest_preview_tag=$(git tag | grep -E '^[0-9]+\.[0-9]{4}\.[0-9]+-rc[0-9]+$' | tail -1)
        if [[ $version =~ ^[0-9]+\.[0-9]{4}\.[0-9]+-rc[0-9]+$ && $version > $latest_preview_tag ]]
        then
          tags="$tags,preview"
        fi


        echo ::set-output name=tags::$tags
    -
      name: Build image
      id:   build
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.service.repo }}#${{ matrix.service.sha }}
        build-args: |
          CRYSTAL_VERSION=${{ env.CRYSTAL_VERSION }}
          PLACE_COMMIT=${{ needs.discover.outputs.commit }}
          PLACE_VERSION=${{ needs.discover.outputs.version }}
          TARGET=${{ matrix.service.name }}
        outputs: type=docker,dest=image.tar
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,scope=${{ matrix.service.name }},mode=max
        tags: ${{ steps.tags.outputs.tags }}
        labels: |
          org.opencontainers.image.url=${{ matrix.service.href }}
          org.opencontainers.image.source=${{ matrix.service.href }}/tree/${{ matrix.service.sha }}
          org.opencontainers.image.version=${{ needs.discover.outputs.version }}
          org.opencontainers.image.revision=${{ matrix.service.sha }}
          org.opencontainers.image.vendor=Place Technology Limited
          org.opencontainers.image.title=${{ matrix.service.name }}
    -
      name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.service.name }}
        path: image.tar

  release:
    needs:
      - publish
    environment: release
    runs-on: ubuntu-latest
    name: Tag and release
    steps:
      - name: Tag
        shell: bash
        run: |
          # Iterate through tags from the build jobs, force updating tags (spooky)
          IFS=','
          read -ratags<<< "${{ needs.build.outputs.tags }}"
          for tag in "${tags[@]}"; do
            git tag --force $tag
          done
          IFS=''

      # TODO: step to get the whether to create release or not
      # - if $version is formatted like a release
      #   - create a release with it
      #     - body has link to the ref on github _with_ markdown anchor to correct version
      #     - see if there's a way to embed a range of text from another file, like a code snippet.

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        env:
          GITHUB_REPOSITORY: my_gh_org/my_gh_repo

  publish:
    needs:
      - build
      - discover
    runs-on: ubuntu-latest
    environment: release
    name: Publish
    steps:
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Download service artifacts
      uses: actions/download-artifact@v2
    -
      name: Load images
      run:  |
        for service in *; do
          echo ::group::$service
          docker load --input $service/image.tar |
          awk '{print $NF}' | xargs docker inspect
          echo ::endgroup::
        done
    -
      name: Publish
      run:  |
        for service in *; do
          echo ::group::$service
          docker push placeos/$service --all-tags
          echo ::endgroup::
        done
    -
      name: Google Chat Notification
      if: success()
      uses: Co-qn/google-chat-notification@releases/v1
      with:
          name: Build PlaceOS ${{ needs.discover.outputs.version }}
          url: ${{ secrets.CHAT_SUCCESS }}
          status: ${{ job.status }}
    -
      name: Google Chat Notification
      if: ${{ failure() || cancelled() }}
      uses: Co-qn/google-chat-notification@releases/v1
      with:
          name: Build PlaceOS ${{ needs.discover.outputs.version }}
          url: ${{ secrets.CHAT_ERROR }}
          status: ${{ job.status }}
